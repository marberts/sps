
R version 4.2.1 (2022-06-23) -- "Funny-Looking Kid"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(sps)
> 
> set.seed(123454)
> 
> # Corner cases
> all.equal(
+   unclass(sps(1:5, 0)),
+   structure(integer(0), weights = numeric(0), levels = character(0))
+ )
[1] TRUE
> all.equal(
+   unclass(sps(1:10, 10)),
+   structure(1:10, weights = rep(1, 10), levels = rep("TA", 10))
+ )
[1] TRUE
> all.equal(
+   unclass(sps(1:10, c(5, 0), gl(2, 5))),
+   structure(1:5, weights = rep(1, 5), levels = rep("TA", 5))
+ )
[1] TRUE
> all.equal(
+   unclass(ps(1:5, 0)),
+   structure(integer(0), weights = numeric(0), levels = character(0))
+ )
[1] TRUE
> all.equal(
+   unclass(ps(1:10, 10)),
+   structure(1:10, weights = rep(1, 10), levels = rep("TA", 10))
+ )
[1] TRUE
> all.equal(
+   unclass(ps(1:10, c(5, 0), gl(2, 5))),
+   structure(1:5, weights = rep(1, 5), levels = rep("TA", 5))
+ )
[1] TRUE
> 
> # Two rounds of TA removal
> samp <- sps(c(20, 1:10, 100), 5)
> all(samp[c(1, 5)] == c(1, 12))
[1] TRUE
> all(levels(samp) == c("TA", rep("TS", 3), "TA"))
[1] TRUE
> all(weights(samp)[c(1, 5)] == 1)
[1] TRUE
> all(weights(samp)[-c(1, 5)] > 1)
[1] TRUE
>
> samp <- ps(c(20, 1:10, 100), 5)
> last <- length(samp)
> all(samp[c(1, last)] == c(1, 12))
[1] TRUE
> all(levels(samp) == c("TA", rep("TS", last - 2), "TA"))
[1] TRUE
> all(weights(samp)[c(1, last)] == 1)
[1] TRUE
> all(weights(samp)[-c(1, last)] > 1)
[1] TRUE
> 
> # Return value should be an integer
> is.integer(sps(1:5, 3))
[1] TRUE
> is.integer(sps(1:5, 0))
[1] TRUE
> is.integer(ps(1:5, 3))
[1] TRUE
> is.integer(ps(1:5, 0))
[1] TRUE
> 
> # Strata sizes should add up
> s <- factor(sample(letters, 100, TRUE), letters)
> x <- rlnorm(100)
> alloc <- prop_allocation(x, 50, s)
> samp <- sps(x, alloc, s)
> all.equal(
+   tabulate(s[samp], nbins = 26), 
+   as.vector(alloc)
+ )
[1] TRUE
> 
> # Tests for permanent random numbers
> set.seed(4321)
> prn <- runif(10)
> all.equal(
+   sps(c(1:9, 100), 5, prn = prn), 
+   sps(c(1:9, 100), 5, prn = prn)
+ )
[1] TRUE
> set.seed(4321)
> all.equal(
+   sps(1:10, 5, prn = prn), 
+   sps(1:10, 5)
+ )
[1] TRUE
> set.seed(4321)
> all.equal(
+   ps(c(1:9, 100), 5, prn = prn), 
+   ps(c(1:9, 100), 5)
+ )
[1] TRUE
> 
> # Test for extending a stratified sample
> set.seed(1432)
> u <- runif(100)
> x <- c(runif(98), 100, 200)
> samp <- sps(x, c(5, 6), rep(1:2, each = 50), u)
> drop <- c(10, 100, 54)
> samp2 <- sps(x[-drop], c(4, 4), rep(1:2, each = 50)[-drop], u[-drop])
> all.equal(
+   x[samp[-match(drop, samp)]], 
+   x[-drop][samp2]
+ )
[1] TRUE
>
> # Weights should be monotonic
> all(order(weights(sps(1:10, 4))) == 4:1)
[1] TRUE
> 
> # Mathematical functions should treat 'sps' objects as numeric vectors
> inherits(log(samp), "numeric") 
[1] TRUE
> inherits(1L + samp, "integer")
[1] TRUE
> inherits(samp / 2, "numeric")
[1] TRUE
> inherits(samp > samp, "logical")
[1] TRUE
> inherits(-samp, "integer")
[1] TRUE
> 
> # And replacement methods
> samp[1] <- 1
> inherits(samp, "numeric")
[1] TRUE
> 
> # Tests for error messages
> try(sps(-1, 1))
Error in check_inclusion_prob(x, n, s) : 
  'x' must be a strictly positive and finite numeric vector
> try(sps(1, NA))
Error in check_inclusion_prob(x, n, s) : 
  'n' must be a positive and finite numeric vector
> try(sps(1:4, 2, c(1, 1, 2, 2)))
Error in check_inclusion_prob(x, n, s) : 
  'n' must have a single sample size for each level in 's'
> try(sps(1:4, c(5, 2), c(1, 1, 2, 2)))
Error in check_inclusion_prob(x, n, s) : 
  sample size 'n' is greater than population size
> try(sps(1:4, 2, prn = c(0.1, 0.1, 0.1, NA)))
Error in sps(1:4, 2, prn = c(0.1, 0.1, 0.1, NA)) : 
  'prn' must be a numeric vector between 0 and 1
> 
> proc.time()
   user  system elapsed 
  0.454   0.106   0.573 
