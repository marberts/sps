
R version 4.2.2 Patched (2022-11-10 r83330) -- "Innocent and Trusting"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(sps)
> 
> set.seed(123454)
> 
> # Corner cases
> all.equal(
+   unclass(sps(1:10, 0)),
+   structure(integer(0), weights = numeric(0), levels = character(0))
+ )
[1] TRUE
> all.equal(
+   unclass(sps(1:10, 10)),
+   structure(1:10, weights = rep(1, 10), levels = rep("TA", 10))
+ )
[1] TRUE
> all.equal(
+   unclass(sps(1:10, c(5, 0), gl(2, 5))),
+   structure(1:5, weights = rep(1, 5), levels = rep("TA", 5))
+ )
[1] TRUE
> all.equal(
+   unclass(ps(1:10, 0)),
+   structure(integer(0), weights = numeric(0), levels = character(0))
+ )
[1] TRUE
> all.equal(
+   unclass(ps(1:10, 10)),
+   structure(1:10, weights = rep(1, 10), levels = rep("TA", 10))
+ )
[1] TRUE
> all.equal(
+   unclass(ps(1:10, c(5, 0), gl(2, 5))),
+   structure(1:5, weights = rep(1, 5), levels = rep("TA", 5))
+ )
[1] TRUE
>
> # Result should be sorted
> x <- c(20, 1:10, 100, 0, 0)
> samp <- sps(x, c(3, 2, 2), c(1, 1, 2, 1, 3, 1, 2, 3, 2, 1, 3, 3, 3, 1))
> all.equal(
+   as.integer(samp),
+   sort(samp)
+ )
[1] TRUE
> 
> # Two rounds of TA removal
> samp <- sps(x, 5)
> all(samp[c(1, 5)] == c(1, 12))
[1] TRUE
> all(levels(samp) == c("TA", rep("TS", 3), "TA"))
[1] TRUE
> all(weights(samp)[c(1, 5)] == 1)
[1] TRUE
> all(weights(samp)[-c(1, 5)] > 1)
[1] TRUE
> 
> samp <- ps(x, 5)
> last <- length(samp)
> all(samp[c(1, last)] == c(1, 12))
[1] TRUE
> all(levels(samp) == c("TA", rep("TS", last - 2), "TA"))
[1] TRUE
> all(weights(samp)[c(1, last)] == 1)
[1] TRUE
> all(weights(samp)[-c(1, last)] > 1)
[1] TRUE
> 
> # Use alpha to make all units TAs
> all.equal(
+     levels(sps(c(0:5, 0:5), c(3, 3), rep(1:2, each = 6), alpha = c(0.51, 0))),
+     c(rep("TA", 3), "TS", "TS", "TA")
+ )
[1] TRUE
> 
> # Does noting when units are already TAs
> all.equal(
+   sps(0:5, 5),
+   sps(0:5, 5, alpha = 0.9)
+ )
[1] TRUE
> 
> # Return value should be an integer
> is.integer(sps(1:5, 3))
[1] TRUE
> is.integer(sps(1:5, 0))
[1] TRUE
> is.integer(ps(1:5, 3))
[1] TRUE
> is.integer(ps(1:5, 0))
[1] TRUE
> 
> # Strata sizes should add up
> s <- factor(sample(letters[-1], 100, TRUE), letters)
> x <- rlnorm(100)
> alloc <- prop_allocation(x, 50, s)
> samp <- sps(x, alloc, s)
> all.equal(
+   tabulate(s[samp], nbins = 26), 
+   as.vector(alloc)
+ )
[1] TRUE
> 
> # Tests for permanent random numbers
> set.seed(4321)
> prn <- runif(11)
> all.equal(
+   sps(c(100, 1:9, 100), 5, prn = prn), 
+   sps(c(100, 1:9, 100), 5, prn = prn)
+ )
[1] TRUE
> set.seed(4321)
> all.equal(
+   sps(c(100, 1:9, 100), 5, prn = prn), 
+   sps(c(100, 1:9, 100), 5)
+ )
[1] TRUE
> set.seed(4321)
> all.equal(
+   ps(c(100, 1:9, 100), 5, prn = prn), 
+   ps(c(100, 1:9, 100), 5)
+ )
[1] TRUE
> 
> # Test for extending a stratified sample
> set.seed(1432)
> u <- runif(100)
> x <- c(runif(98), 100, 200)
> samp <- sps(x, c(5, 6), rep(1:2, each = 50), u)
> drop <- c(10, 100, 54)
> samp2 <- sps(x[-drop], c(4, 4), rep(1:2, each = 50)[-drop], u[-drop])
> all.equal(
+   x[samp[-match(drop, samp)]], 
+   x[-drop][samp2]
+ )
[1] TRUE
> 
> # Weights should be monotonic
> all(order(weights(sps(0:10, 4))) == 4:1)
[1] TRUE
> 
> # Mathematical functions should treat 'sps' objects as numeric vectors
> inherits(log(samp), "numeric") 
[1] TRUE
> inherits(1L + samp, "integer")
[1] TRUE
> inherits(samp / 2, "numeric")
[1] TRUE
> inherits(samp > samp, "logical")
[1] TRUE
> inherits(-samp, "integer")
[1] TRUE
> 
> # And replacement methods
> samp[1] <- 1
> inherits(samp, "numeric")
[1] TRUE
>
> # Other order sampling
> pareto <- order_sampling(function(x) x / (1 - x))
> 
> u <- runif(20)
> all.equal(
+   as.integer(pareto(rep(1, 20), c(5, 6), rep(1:2, 10), u)),
+   sort(c(seq(1, 20, 2)[order(u[seq(1, 20, 2)])[1:5]], seq(2, 20, 2)[order(u[seq(2, 20, 2)])[1:6]]))
+ )
[1] TRUE
>
> # Shift prns
> u <- 1:9 / 10
> v <- (u - 0.5) %% 1
> 
> all.equal(
+     as.integer(pareto(rep(1, 9), 5, prn = u)),
+     1:5
+ )
[1] TRUE
> 
> all.equal(
+     as.integer(pareto(rep(1, 9), 5, prn = v)),
+     5:9
+ )
[1] TRUE
> 
> proc.time()
   user  system elapsed 
  0.515   0.167   0.614 
